(this["webpackJsonpmal-app"]=this["webpackJsonpmal-app"]||[]).push([[0],{22:function(e){e.exports=JSON.parse('[{"id":1483813800000,"title":"Youtube color combination issue ?","author":"Malik","date":"January 8, 2017","content":"\\n## Youtube color combination issue?\\n\\nRecently I noticed something annoying with Youtube\u2019s settings menu.\\n\\n![color-combination](https://lazydevguy.files.wordpress.com/2017/01/youtube-good1.png)\\n\\nThe color combination they\u2019ve used for the toggle switch for Autoplay, Annotations are virtually unidentifiable. Both switch on,off states have been differentiated using a grayish color combination. So for example, you have to really look twice to know whether the  Autoplay is switched on or off.\\n\\n### After adding some contrast to \\"on\\" state in toggle button. Making it bit more intuitive\\n\\n![color-combination](https://lazydevguy.files.wordpress.com/2017/01/youtube-bad1.png)\\n\\nSee now it looks slightly better. A basic rule in UX is that when you want to differentiate two states in UI, you go for complementary color rule.\\n\\nbonus link: [Adobe color wheel](https://color.adobe.com/). Very useful when you want to select color combinations for your UI."},{"id":1483554600000,"title":"Vue is not detected. How to fix vue dev-tools issue?","author":"Malik","date":"January 5, 2017","content":"\\n## Vue is not detected : How to fix vue dev-tools issue ?\\n\\n[Vue dev-tools](https://github.com/vuejs/vue-devtools) is a handy little tool developed by VueJs to make the debugging easier when you develop Vue Applications. Currently there is a [chrome extension available](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd). Also you can install it via yarn or npm as well.\\n\\nBut sometimes you might come across a issue like this when you try to use this tool.\\n\\n![vue-not-detected-1](https://lazydevguy.files.wordpress.com/2017/01/vue-is-not-detected1.png)\\n\\nFollowing are few ways to fix the issue.\\n\\n1. First of all , make sure you are using a non-minified version of VueJS.\\n2. If you are using File:// protocol , By enabling \u201callow access to file URL\u2019s option\u201d in the chrome extension\\n\\n![vue-not-detected-2](https://lazydevguy.files.wordpress.com/2017/01/vue-is-not-detected-chrome-extension.png?w=300&h=145)\\n\\nafter this try closing and reopening the chrome.\\n\\n3. By adding the devtools = true in the app.js file.\\nVue.config.devtools = true\\n\\nMore info [here](https://vuejs.org/v2/api/#devtools)\\n\\n4. If non of the above doesn\u2019t work, try loading your Vue app over a local http-server.\\nHere is a simple http-server. And close and reopen your chrome tab.\\n\\nI was able to resolve this issue by following option 2 and 3.\\n\\n[vue-not-detected-3](https://lazydevguy.files.wordpress.com/2017/01/vue-is-not-detected-solved.png)"},{"id":1483381800000,"title":"When to use git rebasing and why?","author":"Malik","date":"January 3, 2017","content":"\\n## When to use git rebasing and why?\\n\\nNote: My earlier post was [post](http://lazydevguy.blogspot.com/2015/06/useful-git-commands.html) some of the useful commands of git and how to use them\\n\\n#### Git rebase: Introduction\\n\\n[Git rebase](http://git-scm.com/docs/git-rebase) is a handy mechanism when you need merge the changes of your branch with another branch (probably with the master branch) . But the process behind a git-rebase is not that simple as the definition suggests , but it is clean and awesome. In this post, I am going to go through with the process behind a git rebase, when to use it, and when to avoid it.\\n\\nLet\u2019s look at the following simple scenario..\\n\\nSay you are creating a development-branch out of this master branch to do your development stuff.\\n\\n![git-rebase-intro](https://lazydevguy.files.wordpress.com/2017/01/git-rebase-1.png)\\n\\nAnd you are now working on this development-branch for sometime. You make changes, you add these changes and you commit those changes to this branch. Now after few days, you decides that it is the right time to integrate your changes to the master branch . But guess what, your team members have already pushed their changes to the master branch. So you cannot just easily merge your changes to the master without messing up the changes of your peers. Following diagram illustrates the situation\\n\\n![git-rebase-intro2](https://lazydevguy.files.wordpress.com/2017/01/git-rebase-4.png)\\n\\nAs you can see there is a gap between the branch you are working on and the master. This is where the it rebase comes in .By using git rebase you are going to integrate your changes (commit B1, B2) with the master (Where now the head is located at commit M3),\\n\\n![git-rebase-intro3](https://lazydevguy.files.wordpress.com/2017/01/git-rebase-2.png)\\n\\nNow the situation changes to something like below\\n\\n![git-rebase-intro3](https://lazydevguy.files.wordpress.com/2017/01/git-rebase-3.png)\\n\\nWhen you use git rebase , the commit history (commit hashes) changes entirely . That is why i have used the green color to represent the history instead of blue (color of master\u2019s commits) or red (color of development-branch commits).\\n\\n#### Advantage\\n\\nIt creates a **Linear History** which is the very reason why we need to use git rebasing. Your history is clean flat and readable. You can identify the commits of each of your team members very easily in different timelines.\\n\\n#### Disadvantage\\n\\nIn a situation where you have so many people consistently pushing their changes to master and when there are so many branches being merged with the master, It is kind of a pain in the a** to keep your branch upto date with master using git rebase. You have to constantly do the rebasing, and might need to resolve conflicts time to time.\\n\\nAlso rewriting your commit history after each and every reabsing is not always a good thing. It means that your commit hashes change consistently and also, you need to **force push** every time to the remote after a rebase\\n\\n#### When to rebase:\\nOnly when you need a clean linear history so that you can clearly see what is going on with the all the commits from all the team members.\\n\\n#### When not to rebase:\\nIf you prefer to follow a simple mechanism where you can integrate your changes with the upstream branch without a fuss you can always go with [git merge](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging#_basic_merging)."},{"id":1482949800000,"title":"How to merge your silly little commits into one","author":"Malik","date":"December 29, 2016","content":"## Git : How to merge your silly little commits into one\\n\\nThere are three kinds of git users. People who commits every single change ; People who wait and compile all the changes into one gigantic commit. And the last kind is the best kind, who commits in a responsible way. I used to be the first kind, but realized later it is annoying to the people who reviews my PR\u2019s. So here is the thing, git has 2 helpful ways of dealing with this problem.\\n\\n1. git squash\\n2. git reset\\n\\nHere is the scenario. Say if you made some commits with small changes like remove small space 1, change variable name, remove space 2. Later you realize the commits are kind of silly, you want all these commits to be merge into one called something like code cleanup.\\n\\nUsing squash for this problem a bit complex (not if you get used to it). But it sort of gives you an overall idea on what is happening. This is how you do it.\\n\\n## Method 1: Using squash\\n\\nFirst of all make sure your master branch is up-to date with the related upstream branch. And say you are in a feature branch called, well feature-branch.\\n\\nin your git bash, run this command `git rebase -i master`\\n\\n![git squash](https://lazydevguy.files.wordpress.com/2016/12/git-sqush-1.png)\\n\\nyou will get the vim interactive console and you will see all of your 3 commits listed.\\n\\n![git squash](https://lazydevguy.files.wordpress.com/2016/12/git-sqush-2.png)\\n\\nHere the process is simple. You can pick one commit which can be your parent commit  using pick, and the rest of the commits can be linked under this parent commit using squash command. Also you can change the order of the commits as well. So according to our scenario, we can follow this way.\\n\\nAnd that is it. Just save and exit. And you will get another interactive console like below.\\n\\n![git squash](https://lazydevguy.files.wordpress.com/2016/12/git-sqush-5.png)\\n\\nAnd you have successfully merge 3 of your commits into one commit which is going to make a better commit history for you. Now you can just run `git push origin feature-branch \u2013force` to push your single commit to the remote repository.\\n\\nNote: we are using `\u2013force` because this process has changed the commit hashes. In any case, when you use force push, you need to absolutely make sure you know what you are doing.\\n\\nIf you view the commit history, you can see the squashed commits like this visualized in a different way.\\n\\n![git squash](https://lazydevguy.files.wordpress.com/2016/12/git-sqush-6.png)\\n\\nSo that\u2019s how you squash your commits in Git. It is a bit time consuming process, but if you get used to it, it is very useful\\n\\n\\n## Method 2: Using `git reset`\\n\\nSo unlike squashing your commits, you can easily merge your little commits into one using git reset command. It is really simple. Take the same scenario i have mentioned above. Now what you need is, Taking the HEAD position 3 commits back. By doing this you are resetting the last 3 commits.\\n\\n```\\ngit reset \u2013soft HEAD~3\\n```\\n\\nNow you have un-stage changes. All you need to do now is to put them into a single commit.\\n\\n```\\ngit commit -m \u201cCode cleanup\u201d\\n```\\n\\nOr do these both together\\n\\n```\\ngit reset \u2013soft HEAD~3 && git commit -m \u201cCode cleanup\u201d\\n```\\n\\nNow push `\u2013force` to push the new commit into the remote repository. The same warning regarding force push applies here as well.\\n\\nmore info on squashing can be found [here](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History)"},{"id":1482949800000,"title":"How to face software engineering internship interviews?","author":"Malik","date":"December 29, 2016","content":"\\n## How to face software engineering internship interviews ?\\n\\nI got the opportunity to do few interviews and mock interviews for the interns who were trying to get into the Industry as trainees. What i have noticed from the candidates are that they are extremely skillful, had good academic track records and some of them are very good at problem solving. However what i didn\u2019t see was the preparation to face an interview. When the most common questions were asked, i saw the lack of ability to tackle those questions mainly due to the absence of preparation. So i thought of writing few tips on how to tackle an internship interview.\\n\\n### How to face it better ?\\n\\n#### First things first :\\nYou should prepare a small \u201cabout-yourself \u201d description to introduce yourself to the interviewer . Because the first question would almost always be something like \u201cCan you first tell us about yourself a bit\u201d . This is something everyone easily messes-up  because it is so obvious!\\n\\n#### Stick to the script :\\nWhen you introduce yourself to the interviewers, make sure to keep it short and sweet. It should be relevant to the internship. For example after stating the basic information (name, age, where you live), go with your overall academic records, projects you have done, any important contributions you have done to the IT community (such as open-source contributions, tech publications), any interesting hobbies and a bit about why you selected this field. You might not want to share your pet\u2019s name, what your parents doing for a living.\\n\\n#### Bring a copied CV:\\nIf the interview is onsite, this is important and is something always expected from a interviewee.\\n\\n#### Loud and clear:\\nSome people are naturally soft spoken. But when it comes to interviews you need to make sure what you are saying is delivered to the interviewer. If the interviewer had to ask you again and again for something, it will create a negative impression. It will also show you that you are not in cable of having a efficient communication.\\n\\n#### Confidence and eye-contact:\\nDon\u2019t bore your interviewer by acting slow and dull. Show your enthusiasm in your voice and always keep a good eye contact. Attitude matters!\\n\\n#### Be honest:\\nWhen you are asked about something about your self, make  sure you give the correct details. If you are not being honest at that time and if the interviewer later found out that you gave out incorrect details, you are done.\\n\\n#### About your projects:\\nAlways have a look at the overall information about your university projects and you need to prepare for this before coming to the interview. There will be a question like \u201cTell us about your university projects\u201d, So in that case it is important that you know how to explain what you have done . You might have done several projects, in that case, select one. 3 things need to be said during this question.\\n\\n1. Project description (domain, techs used, overall system architecture)\\n2. What is your contribution\\n3. Problems faced and the assumptions made\\n\\n#### Think out loud:\\nYou will be given some kind of problem/scenario where you are required to provide a solution. The solution might be some pseudocode/algorithm or some high-level system design. Sometimes what happens is that you think about a solution in your head without expressing it, Which will result in a uncomfortable silence between you and the interviewer. In this case a pen and paper might come in handy. You can sketch it and show as to how you will approach the issue. So the interviewer will know you got the idea.\\n\\n#### Keeping your self updated:\\nWhen it comes to IT field, It is imperative that you know a bit about the latest techs and trends. So always keep your knowledge polished by readings blogs, magazines etc. Also having a basic knowledge about the company is a must. Go through the company\u2019s website, Facebook page, LinkedIn or another SM accounts and get an overall idea as a part of the preparation for the interview.\\n\\n#### Social media profile:\\nHaving a LinkedIn profile is a good way of marketing your self for a job. Remember to include this in your CV. Also if you managed a blog, if you have a stackoverflow or a github account , share it with your interviewer. This will help him to understand your skills better.\\n\\n#### Passion and Mission:\\nAnother obvious question is \u201cHow do you see yourself in n number of years\u201d. Always prepare for this question before the interview. Also your plans should be relevant to the internship and the field.\\n\\n#### Ask questions:\\nWhen you are asked a question such as \u201d Do you have any questions to be asked from us ? \u201d. Keep at least two questions prepared to ask at this point which also needs to be relevant to the context.\\nFor Example :\\n\\n1. What are the new projects are being developed by your company ?\\n2. How this place will help me to improve my career path ?\\n3. If i get selected , what projects would be assigned to me ? what kind of part would i play in the company/project ?\\n\\n"},{"id":1454783400000,"title":"Resolve NPM install \\"unmet dependency\\" warning","author":"Malik","date":"February 7, 2016","content":"## Resolve NPM install `unmet dependency` warning\\n\\nSometimes when you try to install node modules, npm prompts the following warning message:\\n\\n![npm dependency issue](https://lazydevguy.files.wordpress.com/2016/02/capture.png)\\n\\n> npm WARN unmet dependency undefined,\\nnpm WARN unmet dependency which is version undefined\\n\\nBecause of this some of the node modules might not get installed correctly. There are couple of main reasons why this could happen.\\n\\n1. You might be using a older version of NPM.\\nSolution : Check your NPM version and make sure it is upto date . If not try updating your NPM application globally.\\n\\n2. Network interruptions while downloading dependencies or NPM cache problems Solution:  `rm -rf` the local node_modules folder and run `npm cache clean`. This should enable you to run a clean `npm install`. again."},{"id":1435170600000,"title":"Git rebase merge conflict resolving. Did you forget to use add?","author":"Malik","date":"June 25, 2015","content":"\\n## Git rebase merge conflict resolving. Did you forget to use add?\\n\\nSometimes when you rebase your branch with the master branch and after fixing a merge conflict you might encounter following issue\\n\\n### The loopy problem of git rebasing\\n\\n```\\n$ git rebase \u2013continue\\nApplying: loglevel equal to silent\\nNo changes \u2013 did you forget to use \u2018git add\u2019?\\n```\\n\\nIf there is nothing left to stage, chances are that something else. already introduced the same changes; you might want to skip this patch.\\n\\nWhen you have resolved this problem, run `git rebase \u2013continue`. If you prefer to skip this patch, run `git rebase \u2013skip` instead.\\nTo check out the original branch and stop rebasing, run `git rebase \u2013abort`.\\n\\n![git-rebase-loop](https://lazydevguy.files.wordpress.com/2015/06/git2.png)\\n\\nBut the problem you might having is that you have already added the file using git add `yourconfilctedfilename`  And might have added several times but still Git telling you to add the file again??\\n\\n### The loopy problem of git rebasing\\nI have encountered this issue couple of times and it turns out is a [git bug](https://github.com/git/git/commit/95104c7e257652b82aed089494def344e3938928) which was later fixed with Git 2.0.2 version. So anyway in this case rather than updating your git application, you can simply do the git rebase \u2013skip and just skip the patch. It will not do any harm because the patch was empty anyway."},{"id":1435084200000,"title":"How to set Visual Studio Version With NPM","author":"Malik","date":"June 24, 2015","content":"## How to set Visual Studio Version With NPM\\n\\nWhen you install NPM modules in windows environment  , some times you might ran into an error like below.\\n\\n> C:\\\\Program Files (x86)\\\\MSBuild\\\\Microsoft.Cpp\\\\v4.0\\\\V120\\\\Microsoft.Cpp.Platform.targets(64,5): error MSB8020: The build tools for Visual Studio 2010 (Platform Toolset = \u2018v100\u2019) cannot be found. To build using the v100 build tools, please install Visual Studio 2010 build tools. Alternatively, you may upgrade to the current Visual Studio tools by selecting the Project menu or right-click the solution, and then selecting \u201cUpgrade Solution\u2026\u201d. [C:\\\\Users\\\\Documents\\\\FLIS.Client.Tests\\\\node_modules\\\\karma\\\\node_modules\\\\socket.io\\\\node_modules\\\\socket.io-client\\\\node_modules\\\\ws\\\\build\\\\bufferutil.vcxproj]\\n\\nAs you can see the error says that it cannot find the Visual studio 2010 platform toolset. In this case you can externally specify build platform toolset to NPM like this.\\n\\n```\\n\u2013msvs-version=2013 // I am running visual studio 2013 . So\u2026\\n```\\n\\nFor E.g If you want to install protractor with `\u2013msvs-version=2013`\\n\\n```\\nnpm install protractor \u2013msvs-version=2013\\n```"},{"id":1422988200000,"title":"Difference between $scope and $rootscope","author":"Malik","date":"February 4, 2015","content":"\\n## Difference between \\\\$scope and \\\\$rootscope\\n\\nWhenever you declare a controller in angular , you automatically create a `$scope` which is relevant to that controller.\\n\\n### So what does a \\\\$scope mean\\n\\nfrom documentation\\n> `$scope` is an object that refers to the application model. It is an execution context for expressions. `$scopes` are arranged in hierarchical structure which mimic the DOM structure of the application. `$scope` can watch expressions and propagate events.\u201d .\\n\\nIn simpler terms it means that it is a way of tying an object to the DOM . If you consider the MVC model in Angular , the scope acts as a model . It is a template which hosts all the functions and the related data . Okay now that we have gotten some insight into the `$scope`.\\n\\nNow let talk about `$rootscope`.\\n\\n`$rootscope` is the parent (more like a root parent) of all the `$scopes` you create . It is the ultimate boss . It is (almost) like the Object class of Java .It is the top most `$scope` of your app and it contains ng-app directive . There is only one `$rootscope` for each of the Angular application .\\n\\n![ difference ](https://lazydevguy.files.wordpress.com/2015/02/blog.png)"}]')},31:function(e,t,o){},57:function(e,t,o){},58:function(e,t,o){},60:function(e,t,o){"use strict";o.r(t);var n=o(1),i=o.n(n),s=o(32),a=o.n(s),r=o(10),c=o(39),l=o(13),h=o(4),u=o(6),d=o(14),m=o(11),g=o(12),p=o(0),y=function(e){Object(m.a)(o,e);var t=Object(g.a)(o);function o(){return Object(u.a)(this,o),t.apply(this,arguments)}return Object(d.a)(o,[{key:"render",value:function(){return Object(p.jsx)("span",{className:"about-container",children:Object(p.jsxs)("ul",{children:[Object(p.jsxs)("li",{children:[Object(p.jsx)("span",{className:"link-icon",children:Object(p.jsx)("ion-icon",{name:"logo-github"})}),Object(p.jsx)("a",{href:"https://github.com/mal90",children:" Github "})]}),Object(p.jsxs)("li",{children:[Object(p.jsx)("span",{className:"link-icon",children:Object(p.jsx)("ion-icon",{name:"logo-stackoverflow"})}),Object(p.jsx)("a",{href:"https://stackoverflow.com/users/1305026/malik",children:" Stack overflow "})]}),Object(p.jsxs)("li",{children:[Object(p.jsx)("span",{className:"link-icon",children:Object(p.jsx)("ion-icon",{name:"logo-linkedin"})}),Object(p.jsx)("a",{href:"https://www.linkedin.com/in/maliksalim/",children:" LinkedIn "})]}),Object(p.jsxs)("li",{children:[Object(p.jsx)("span",{className:"link-icon",children:Object(p.jsx)("ion-icon",{name:"logo-instagram"})}),Object(p.jsx)("a",{href:"https://www.instagram.com/madkmalik/",children:" Instagram "})]})]})})}}]),o}(i.a.Component),b=o(22),f=function(e){return Object(p.jsxs)("div",{className:"blog-container",children:[Object(p.jsx)("h3",{className:"main-title",children:"All Posts"}),Object(p.jsx)("ul",{children:b.length&&b.map((function(e,t){return Object(p.jsx)(r.b,{className:"links",to:"/post/".concat(e.id),children:Object(p.jsxs)("li",{className:"post-item",children:[Object(p.jsx)("h4",{children:e.title}),Object(p.jsxs)("small",{children:["Published on ",e.date," by ",e.author]})]})},e.id)}))})]})},w=(o(31),function(e){Object(m.a)(o,e);var t=Object(g.a)(o);function o(){return Object(u.a)(this,o),t.apply(this,arguments)}return Object(d.a)(o,[{key:"render",value:function(){return Object(p.jsxs)("span",{className:"home-container",children:[Object(p.jsx)("h1",{children:" Hello, i am a Frontend developer from Sri Lanka"}),Object(p.jsxs)(r.b,{className:"about",to:"about",children:["\ud83d\udc4b  \xa0 Get to know me",Object(p.jsx)("span",{className:"about-icon",children:Object(p.jsx)("ion-icon",{name:"arrow-forward-outline"})})]})]})}}]),o}(i.a.Component)),v=o(38),j=function(e){var t=parseInt(e.match.params.id);if(t){var o={};return b.forEach((function(e,n){t===e.id&&(o.title=e.title?e.title:"No title given",o.date=e.date?e.date:"No date given",o.author=e.author?e.author:"No author given",o.content=e.content?e.content:"No content given")})),Object(p.jsxs)("div",{className:"post-container",children:[Object(p.jsxs)(r.b,{className:"go-back",to:"/blog",children:[Object(p.jsx)("span",{className:"arrow-back-outline",children:Object(p.jsx)("ion-icon",{name:"arrow-back-outline"})}),"back to all posts"]}),Object(p.jsxs)("small",{children:["Published on ",o.date," by ",o.author]}),Object(p.jsx)("hr",{}),Object(p.jsx)("div",{className:"markdown-body",children:Object(p.jsx)(v.a,{children:o.content})})]})}},k=function(){return Object(p.jsx)("span",{className:"landing-page",children:Object(p.jsxs)(h.c,{children:[Object(p.jsx)(h.a,{exact:!0,path:"/",children:Object(p.jsx)(w,{})}),Object(p.jsx)(h.a,{exact:!0,path:"/about",children:Object(p.jsx)(y,{})}),Object(p.jsx)(h.a,{exact:!0,path:"/blog",children:Object(p.jsx)(f,{})}),Object(p.jsx)(h.a,{exact:!0,path:"/post/:id",render:function(e){return Object(p.jsx)(j,Object(l.a)({},e))}})]})})},x=function(e){Object(m.a)(o,e);var t=Object(g.a)(o);function o(){return Object(u.a)(this,o),t.apply(this,arguments)}return Object(d.a)(o,[{key:"render",value:function(){return Object(p.jsx)("li",{className:"menu-item",children:Object(p.jsx)(r.b,{to:this.props.redirect,children:this.props.name})})}}]),o}(i.a.Component),O=(o(57),o.p+"static/media/dp.bdeb0b0e.jpg"),N=function(e){var t=e.toggleMenu,o=e.setToggleMenu;return Object(p.jsxs)("div",{className:"side-menu ".concat(t?"show":"hide"),children:[Object(p.jsx)("img",{src:O,alt:"Logo"}),Object(p.jsxs)("ul",{className:"menu-container",onClick:function(){return function(e){e(!1)}(o)},children:[Object(p.jsx)(x,{redirect:"/",name:"Home"}),Object(p.jsx)(x,{redirect:"/about",name:"About"}),Object(p.jsx)(x,{redirect:"/blog",name:"Blog"})]})]})},I=function(e){return Object(p.jsx)("small",{className:"footer",children:"\xa9 Copyright 2021 Malik"})},A=function(){var e=Object(n.useState)(!1),t=Object(c.a)(e,2),o=t[0],i=t[1];return Object(p.jsxs)("span",{className:"app",children:[Object(p.jsx)("div",{className:"burger-btn",onClick:function(){i(!o)},children:o?Object(p.jsx)("ion-icon",{size:"large",name:"close-outline",className:"close-btn"}):Object(p.jsxs)("span",{children:[Object(p.jsx)("span",{className:"burger-line"}),Object(p.jsx)("span",{className:"burger-line"}),Object(p.jsx)("span",{className:"burger-line"})]})}),Object(p.jsx)(N,{toggleMenu:o,setToggleMenu:i}),Object(p.jsxs)("span",{className:"landing-page-container",children:[Object(p.jsx)(k,{}),Object(p.jsx)(I,{})]})]})};o(58),o(59);a.a.render(Object(p.jsx)(i.a.StrictMode,{children:Object(p.jsx)(r.a,{children:Object(p.jsx)(A,{})})}),document.getElementById("root"))}},[[60,1,2]]]);
//# sourceMappingURL=main.d6efeba0.chunk.js.map