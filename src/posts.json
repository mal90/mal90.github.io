[{"id":1482949800000,"title":"How to merge your silly little commits into one","author":"Malik","date":"December 29, 2016","content":"## Git : How to merge your silly little commits into one\n\nThere are three kinds of git users. People who commits every single change ; People who wait and compile all the changes into one gigantic commit. And the last kind is the best kind, who commits in a responsible way. I used to be the first kind, but realized later it is annoying to the people who reviews my PR’s. So here is the thing, git has 2 helpful ways of dealing with this problem.\n\n1. git squash\n2. git reset\n\nHere is the scenario. Say if you made some commits with small changes like remove small space 1, change variable name, remove space 2. Later you realize the commits are kind of silly, you want all these commits to be merge into one called something like code cleanup.\n\nUsing squash for this problem a bit complex (not if you get used to it). But it sort of gives you an overall idea on what is happening. This is how you do it.\n\n## Method 1: Using squash\n\nFirst of all make sure your master branch is up-to date with the related upstream branch. And say you are in a feature branch called, well feature-branch.\n\nin your git bash, run this command `git rebase -i master`\n\n![git squash](https://lazydevguy.files.wordpress.com/2016/12/git-sqush-1.png)\n\nyou will get the vim interactive console and you will see all of your 3 commits listed.\n\n![git squash](https://lazydevguy.files.wordpress.com/2016/12/git-sqush-2.png)\n\nHere the process is simple. You can pick one commit which can be your parent commit  using pick, and the rest of the commits can be linked under this parent commit using squash command. Also you can change the order of the commits as well. So according to our scenario, we can follow this way.\n\nAnd that is it. Just save and exit. And you will get another interactive console like below.\n\n![git squash](https://lazydevguy.files.wordpress.com/2016/12/git-sqush-5.png)\n\nAnd you have successfully merge 3 of your commits into one commit which is going to make a better commit history for you. Now you can just run `git push origin feature-branch –force` to push your single commit to the remote repository.\n\nNote: we are using `–force` because this process has changed the commit hashes. In any case, when you use force push, you need to absolutely make sure you know what you are doing.\n\nIf you view the commit history, you can see the squashed commits like this visualized in a different way.\n\n![git squash](https://lazydevguy.files.wordpress.com/2016/12/git-sqush-6.png)\n\nSo that’s how you squash your commits in Git. It is a bit time consuming process, but if you get used to it, it is very useful\n\n\n## Method 2: Using `git reset`\n\nSo unlike squashing your commits, you can easily merge your little commits into one using git reset command. It is really simple. Take the same scenario i have mentioned above. Now what you need is, Taking the HEAD position 3 commits back. By doing this you are resetting the last 3 commits.\n\n```\ngit reset –soft HEAD~3\n```\n\nNow you have un-stage changes. All you need to do now is to put them into a single commit.\n\n```\ngit commit -m “Code cleanup”\n```\n\nOr do these both together\n\n```\ngit reset –soft HEAD~3 && git commit -m “Code cleanup”\n```\n\nNow push `–force` to push the new commit into the remote repository. The same warning regarding force push applies here as well.\n\nmore info on squashing can be found [here](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History)"},{"id":1454783400000,"title":"Resolve NPM install \"unmet dependency\" warning","author":"Malik","date":"February 7, 2016","content":"## Resolve NPM install `unmet dependency` warning\n\nSometimes when you try to install node modules, npm prompts the following warning message:\n\n![npm dependency issue](https://lazydevguy.files.wordpress.com/2016/02/capture.png)\n\n> npm WARN unmet dependency undefined,\nnpm WARN unmet dependency which is version undefined\n\nBecause of this some of the node modules might not get installed correctly. There are couple of main reasons why this could happen.\n\n1. You might be using a older version of NPM.\nSolution : Check your NPM version and make sure it is upto date . If not try updating your NPM application globally.\n\n2. Network interruptions while downloading dependencies or NPM cache problems Solution:  `rm -rf` the local node_modules folder and run `npm cache clean`. This should enable you to run a clean `npm install`. again."},{"id":1435170600000,"title":"Git rebase merge conflict resolving. Did you forget to use add?","author":"Malik","date":"June 25, 2015","content":"\n## Git rebase merge conflict resolving. Did you forget to use add?\n\nSometimes when you rebase your branch with the master branch and after fixing a merge conflict you might encounter following issue\n\n### The loopy problem of git rebasing\n\n```\n$ git rebase –continue\nApplying: loglevel equal to silent\nNo changes – did you forget to use ‘git add’?\n```\n\nIf there is nothing left to stage, chances are that something else. already introduced the same changes; you might want to skip this patch.\n\nWhen you have resolved this problem, run `git rebase –continue`. If you prefer to skip this patch, run `git rebase –skip` instead.\nTo check out the original branch and stop rebasing, run `git rebase –abort`.\n\n![git-rebase-loop](https://lazydevguy.files.wordpress.com/2015/06/git2.png)\n\nBut the problem you might having is that you have already added the file using git add `yourconfilctedfilename`  And might have added several times but still Git telling you to add the file again??\n\n### The loopy problem of git rebasing\nI have encountered this issue couple of times and it turns out is a [git bug](https://github.com/git/git/commit/95104c7e257652b82aed089494def344e3938928) which was later fixed with Git 2.0.2 version. So anyway in this case rather than updating your git application, you can simply do the git rebase –skip and just skip the patch. It will not do any harm because the patch was empty anyway."},{"id":1435084200000,"title":"How to set Visual Studio Version With NPM","author":"Malik","date":"June 24, 2015","content":"## How to set Visual Studio Version With NPM\n\nWhen you install NPM modules in windows environment  , some times you might ran into an error like below.\n\n> C:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\V120\\Microsoft.Cpp.Platform.targets(64,5): error MSB8020: The build tools for Visual Studio 2010 (Platform Toolset = ‘v100’) cannot be found. To build using the v100 build tools, please install Visual Studio 2010 build tools. Alternatively, you may upgrade to the current Visual Studio tools by selecting the Project menu or right-click the solution, and then selecting “Upgrade Solution…”. [C:\\Users\\Documents\\FLIS.Client.Tests\\node_modules\\karma\\node_modules\\socket.io\\node_modules\\socket.io-client\\node_modules\\ws\\build\\bufferutil.vcxproj]\n\nAs you can see the error says that it cannot find the Visual studio 2010 platform toolset. In this case you can externally specify build platform toolset to NPM like this.\n\n```\n–msvs-version=2013 // I am running visual studio 2013 . So…\n```\n\nFor E.g If you want to install protractor with `–msvs-version=2013`\n\n```\nnpm install protractor –msvs-version=2013\n```"},{"id":1422988200000,"title":"Difference between $scope and $rootscope","author":"Malik","date":"February 4, 2015","content":"\n## Difference between \\$scope and \\$rootscope\n\nWhenever you declare a controller in angular , you automatically create a `$scope` which is relevant to that controller.\n\n### So what does a \\$scope mean\n\nfrom documentation\n> `$scope` is an object that refers to the application model. It is an execution context for expressions. `$scopes` are arranged in hierarchical structure which mimic the DOM structure of the application. `$scope` can watch expressions and propagate events.” .\n\nIn simpler terms it means that it is a way of tying an object to the DOM . If you consider the MVC model in Angular , the scope acts as a model . It is a template which hosts all the functions and the related data . Okay now that we have gotten some insight into the `$scope`.\n\nNow let talk about `$rootscope`.\n\n`$rootscope` is the parent (more like a root parent) of all the `$scopes` you create . It is the ultimate boss . It is (almost) like the Object class of Java .It is the top most `$scope` of your app and it contains ng-app directive . There is only one `$rootscope` for each of the Angular application .\n\n![ difference ](https://lazydevguy.files.wordpress.com/2015/02/blog.png)"}]